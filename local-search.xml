<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Activiti</title>
    <link href="/2022/07/13/Activiti/"/>
    <url>/2022/07/13/Activiti/</url>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>在实际社会生产环境中，我们存在这样的需要，即需要由一个人发起一项活动，这个活动涉及到多个参与者，且可能位于不同的空间中。这样的一个活动就是流程，比如我们常见的请假过程，就是一个流程：由请假人发起请假（填写请假表单），之后由部门领导或老师审批，一直到最终部门审批。</p><p>为了更加方便的处理上述过程（自动化处理），流程支持工具出现了，比如我们这里主要介绍的<code>Activiti</code>。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ul><li>流程自动化的传统做法是给条目加上状态字段，每个角色读取属于自己状态码所对应的条目信息然后进行操作并改变状态码信息。这样带来的问题是，当业务流程发生改变时，代码需要重写。<code>Activiti</code>的出现就是为了解决上述问题。</li></ul><ul><li>在流程定义中，工作流需要规范定义节点（绘制流程图时），如某个节点拥有哪些属性、使用什么图标等，这一套规则依赖于<code>bpmn</code>。</li></ul><ul><li><p>流程支持工具总的步骤是：</p><ul><li>先将业务流程图画好（专门的工具【<code>Activiti</code>中是<code>Activiti Designer</code>】）</li><li>将流程图中每个节点的数据读取并放入表中</li><li>读取表中的第一条记录，处理并删除</li></ul></li><li><p>原理总结：</p><ul><li>业务流程图要规范化，要遵守一套标准</li><li>这个业务流程图实际上是一个<code>xml</code>文件</li><li>读取业务流程图的过程就是解析<code>xml</code>文件的过程</li><li>读取流程图中的一个节点相当于解析一个<code>xml</code>节点，并将数据插入到<code>mysql</code>表中，形成一条记录</li><li>主要将所有节点都读取并存入<code>mysql</code>表中</li><li>后面只需要读取<code>mysql</code>中的记录</li><li>业务流程的推进，后面即转换为读取表中数据并处理</li></ul></li></ul><ul><li><p><code>Activiti</code>软件本身关联到的技术：<code>xml</code>+<code>dom4j</code>+<code>mysql</code>+<code>jdbc</code></p><ul><li>流程定义文件<code>BPMN</code>实际上是一个<code>XML</code>文件，需要用到解析工具</li><li>自动生成表时需要与数据库交互</li></ul></li><li><p>一些术语的全称</p><ul><li><code>BPM(Business Process Management)</code> 业务流程管理</li><li><code>BPMN(Business Process Model And Notation)</code> 业务流程模型和符号</li><li><code>BPMI(Business Process Management Initiative)</code> </li></ul></li></ul><h2 id="使用Activiti"><a href="#使用Activiti" class="headerlink" title="使用Activiti"></a>使用Activiti</h2><ul><li>需要将<code>Activiti</code>整合到项目中</li><li>实现业务流程建模，即使用<code>BPMN</code>实现业务流程图</li><li>部署业务流程到<code>Activiti</code><ul><li>流程定义部署是指将线下定义的流程（用建模工具<code>BPMN</code>绘制的流程图和生成的<code>png</code>流程图片）通过调用<code>activiti</code>中的相关<code>API</code>部署到<code>activiti</code>数据库中。</li></ul></li><li>启动流程实例</li><li>查询待办任务</li><li>处理待办任务</li><li>结束流程</li></ul><ul><li>针对<code>Eclipse</code>和<code>IDEA</code>有不同的插件整合方式（目的是让集成开发环境支持<code>Activiti</code>开发）</li></ul><ul><li><p>在开发前，需要导入相应的<code>jar</code>包，一般使用<code>Maven</code>构建项目，故在<code>pom.xml</code>文件中写入依赖的坐标即可（参照项目中的<code>actiProj</code>项目文件）</p></li><li><p>引入依赖并配置好数据库等之后，执行测试代码，会生成25张表（视<code>Activiti</code>版本不同而不同，这里使用的<code>Activiti</code>版本是<code>7.0.0.Beta1</code>）</p></li><li><p>25张表的名称有一定的规律</p><img src="/2022/07/13/Activiti/image-20210505110141039.png" class=""><ul><li>均以<code>act</code>开头</li><li>第二部分是表示表的用途的字符标识（<strong>用途和流程服务的API对应</strong>）<ul><li><code>act_re_*</code> : ‘re’表示’<strong>repository</strong>‘；这些表包含了静态信息，如<strong>流程定义</strong>和<strong>流程资源</strong>（图片、规则等）【共3张】；<code>RepositoryService</code>接口所操作的表。</li><li><code>act_ru_*</code> : ‘ru’表示’<strong>runtime</strong>‘；这些表是运行时的表（<code>RuntimeService</code>接口所控制），包含流程实例、任务、变量、异步任务等运行中的数据（只在流程实例运行过程中保存这些数据，流程结束时会删除这些数据，兼顾表的大小和速度）【共10张】。</li><li><code>act_hi_*</code> : ‘hi’表示’history’；这些表包含历史数据，比如历史流程实例、变量、任务等【共8张】。</li><li><code>act_ge_*</code> : ‘ge’表示’general’；这些表包含通用数据，用于不同场景下【共2张】。</li><li><code>act_evt_log</code> : 该表包含日志信息。</li><li><code>act_procdef_info</code> : 该表包含流程定义信息。</li></ul></li></ul></li></ul><h2 id="Activiti服务架构图"><a href="#Activiti服务架构图" class="headerlink" title="Activiti服务架构图"></a>Activiti服务架构图</h2><p><img src="Activiti.assets/20191226173208831.png" alt="img"></p><img src="/2022/07/13/Activiti/20191226173208831.png" class=""><h3 id="流程引擎配置文件"><a href="#流程引擎配置文件" class="headerlink" title="流程引擎配置文件"></a>流程引擎配置文件</h3><p><code>activiti.cfg.xml</code>是<code>Activiti</code>默认的配置文件，该配置文件类似于<code>Spring</code>的配置文件，在其中主要配置数据源、事务以及<code>Activiti</code>的配置，如<code>ProcessEngineConfiguration</code>的配置。下面的事例是一个基本的流程配置文件，定义了数据源和流程引擎。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xmlns:tx</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/tx&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;</span></span><br><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/beans </span></span><br><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/context </span></span><br><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/tx </span></span><br><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/tx/spring-tx.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/aop </span></span><br><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/aop/spring-aop.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/activiti&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;username&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;password&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 使用脱机方式创建对象 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;processEngineConfiguration&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 设置是否自动生成数据表 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;databaseSchemaUpdate&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="ProcessEngineConfiguration"><a href="#ProcessEngineConfiguration" class="headerlink" title="ProcessEngineConfiguration"></a>ProcessEngineConfiguration</h3><ul><li>流程引擎的配置类；</li><li>位于<code>org.activiti.engine</code>包中；</li><li>通过该类的对象可以创建工作流引擎<code>ProcessEngine</code>。</li></ul><ul><li><p>创建工作流引擎（<code>ProcessEngineConfiguration</code>）通常有两种形式：</p><ul><li><p>形式一：使用脱机方式创建（不与<code>Spring</code>整合）</p><ul><li><p>使用的类：<code>StandaloneProcessEngineConfiguration</code>（在<code>org.activiti.engine.impl.cfg</code>包中）（如上面的配置文件中就是使用该类创建）</p></li><li><p>通常<code>Activiti</code>可以单独运行，通过这种方式创建的<code>ProcessEngine</code>，事务由<code>Activiti</code>自己处理。</p></li><li><p>使用这种方式的配置文件如下，名称通常固定为<code>activiti.cfg.xml</code>，同时<code>bean</code>名称也固定，可以从<code>ProcessEngineConfiguration</code>的源代码中看出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ProcessEngineConfiguration <span class="hljs-title function_">createProcessEngineConfigurationFromResourceDefault</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> createProcessEngineConfigurationFromResource(<span class="hljs-string">&quot;activiti.cfg.xml&quot;</span>, <span class="hljs-string">&quot;processEngineConfiguration&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ProcessEngineConfiguration <span class="hljs-title function_">createProcessEngineConfigurationFromResource</span><span class="hljs-params">(String resource)</span> &#123;<br>    <span class="hljs-keyword">return</span> createProcessEngineConfigurationFromResource(resource, <span class="hljs-string">&quot;processEngineConfiguration&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ProcessEngineConfiguration <span class="hljs-title function_">createProcessEngineConfigurationFromResource</span><span class="hljs-params">(String resource, String beanName)</span> &#123;<br>    <span class="hljs-keyword">return</span> BeansConfigurationHelper.parseProcessEngineConfigurationFromResource(resource, beanName);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/activiti&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;username&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;password&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 使用脱机方式创建对象 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;processEngineConfiguration&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 设置是否自动生成数据表 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;databaseSchemaUpdate&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>注意：虽然形式一事务由<code>Activiti</code>自己处理，但同时使用到了<code>Spring</code>的依赖注入来创建实例。</p></li></ul></li></ul><ul><li>形式二：通过与<code>Spring</code>整合的方式<ul><li>使用的类：<code>SpringProcessEngineConfiguration</code>（在<code>org.activiti.spring</code>包中）</li><li>使用整合的方式创建时，配置文件需要是与<code>Spring</code>整合的配置文件，名称通常是<code>activiti-spring.cfg.xml</code>。但事实上上面形式一的配置文件就可以，只不过需要改变里面<code>bean</code>实例的相关配置。</li></ul></li></ul></li></ul><ul><li><p>创建<code>processEngineConfiguration</code></p><ul><li><p>在业务类中可以通过下面的代码创建<code>processEngineConfiguration</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ProcessEngineConfiguration</span> <span class="hljs-variable">configuration</span> <span class="hljs-operator">=</span> ProcessEngineConfiguration.createProcessEngineConfigurationFromResource(<span class="hljs-string">&quot;activiti.cfg.xml&quot;</span>); <span class="hljs-comment">// 参数为activiti配置文件名称，通常在类路径下</span><br></code></pre></td></tr></table></figure></li><li><p>通过上面代码创建<code>processEngineConfiguration</code>时，需要在配置文件中存在一个名称为<code>processEngineConfiguration</code>的<code>bean</code>，如果不想使用默认的<code>bean</code>名称，可以使用之前源码中的第三块代码，其中的<code>beanName</code>在配置文件中和调用方法中需要保持一致。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ProcessEngineConfiguration <span class="hljs-title function_">createProcessEngineConfigurationFromResource</span><span class="hljs-params">(String resource, String beanName)</span> &#123;<br>    <span class="hljs-keyword">return</span> BeansConfigurationHelper.parseProcessEngineConfigurationFromResource(resource, beanName);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="ProcessEngine"><a href="#ProcessEngine" class="headerlink" title="ProcessEngine"></a>ProcessEngine</h3><ul><li><code>ProcessEngine</code>的存在跟它的名称一样，是一个引擎，只有存在这个引擎，才能使用这个引擎所在系统的各种服务，即其本质上是一个门面接口。</li><li>在<code>ProcessEngine</code>对象中，提供了调用各种服务的方法，这些服务有<code>RepositoryService</code>, <code>RuntimeService</code>, <code>TaskService</code>, <code>HistoryService</code>, <code>ManagementService</code>, <code>DynamicBpmnService</code>。与上面的架构图相比，<code>Activiti7</code>中去掉了<code>IdentityService</code>和<code>FormService</code>两个服务。</li><li>获取到相应的服务后，实质上就可以操作生成的对应的数据表（如<code>HistoryService</code>服务就可以操作与流程历史数据相关的表<code>act_hi_*</code>）。</li></ul><ul><li><p>创建方式：</p><ul><li><p>一般方式：通过<code>ProcessEngineConfiguration</code>创建，上面<code>ProcessEngineConfiguration</code>章节中就是使用这种方式创建的。通过这种方式创建时，灵活性更高，程序员有更多的选择性。</p></li><li><p>简单方式：通过<code>ProcessEngines</code>创建，这种创建方式通常需要满足以下两个条件：① <code>Activiti</code>的配置文件名称为<code>activiti.cfg.xml</code>；②在配置文件中存在一个id为<code>processEngineConfiguration</code>的<code>bean</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ProcessEngine</span> <span class="hljs-variable">processEngine</span> <span class="hljs-operator">=</span> ProcessEngines.getDefaultProcessEngine();<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="Service（各种服务）的创建"><a href="#Service（各种服务）的创建" class="headerlink" title="Service（各种服务）的创建"></a>Service（各种服务）的创建</h3><p>在架构图中的末端，是一些具体的<code>Service API</code>，如何创建这些服务的对象呢？</p><p>如前面所述，<code>ProcessEngine</code>是一个引擎，提供调用各种服务接口的方法，故当然可以通过<code>ProcessEngine</code>创建这些<code>Service</code>对象。</p><ul><li><p><code>Service</code>是工作流引擎提供用于进行工作流部署、执行、管理的服务接口。具体如下：</p><table><thead><tr><th align="center">服务接口</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">RepositoryService</td><td align="center"><code>Activiti</code>的资源管理类</td></tr><tr><td align="center">RuntimeService</td><td align="center"><code>Activiti</code>的流程运行管理类</td></tr><tr><td align="center">TaskService</td><td align="center"><code>Activiti</code>的任务管理类</td></tr><tr><td align="center">HistoryService</td><td align="center"><code>Activiti</code>的历史管理类</td></tr><tr><td align="center">ManagementService</td><td align="center"><code>Activiti</code>的引擎管理类</td></tr></tbody></table></li></ul><ul><li><p>通过<code>ProcessEngine</code>创建各种<code>Service</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">RepositoryService</span> <span class="hljs-variable">repositoryService</span> <span class="hljs-operator">=</span> processEngine.getRepositoryService();<br><span class="hljs-type">RuntimeService</span> <span class="hljs-variable">runtimeService</span> <span class="hljs-operator">=</span> processEngine.getRuntimeService();<br><span class="hljs-type">DynamicBpmnService</span> <span class="hljs-variable">dynamicBpmnService</span> <span class="hljs-operator">=</span> processEngine.getDynamicBpmnService();<br></code></pre></td></tr></table></figure></li><li><p><code>ProcessEngine</code>中提供的调用各种<code>Service</code>的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">RepositoryService <span class="hljs-title function_">getRepositoryService</span><span class="hljs-params">()</span>;<br><br>RuntimeService <span class="hljs-title function_">getRuntimeService</span><span class="hljs-params">()</span>;<br><br>TaskService <span class="hljs-title function_">getTaskService</span><span class="hljs-params">()</span>;<br><br>HistoryService <span class="hljs-title function_">getHistoryService</span><span class="hljs-params">()</span>;<br><br>ManagementService <span class="hljs-title function_">getManagementService</span><span class="hljs-params">()</span>;<br><br>DynamicBpmnService <span class="hljs-title function_">getDynamicBpmnService</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure></li></ul><h3 id="详述各种Service"><a href="#详述各种Service" class="headerlink" title="详述各种Service"></a>详述各种Service</h3><h4 id="RepositoryService"><a href="#RepositoryService" class="headerlink" title="RepositoryService"></a>RepositoryService</h4><ul><li><code>RepositoryService</code>是<code>Activiti</code>中的资源管理类（管理Activiti内建的Repository），提供了管理和控制流程发布包和流程定义的操作（对Repository的存取服务）。具体如下：<ul><li>使用<strong>工作流建模工具</strong>设计的业务流程图需要借助该服务将流程定义文件的内容部署到计算机；</li><li>查询引擎中的流程发布包和流程定义；</li><li>暂停或激活流程发布包，分别对应全部和特定流程定义；</li><li>获得多种资源，如包含在发布包里的文件，引擎自动生成的流程图；</li><li>获得流程定义的<code>POJO</code>版本，从而实现<code>Java</code>解析，而非<code>XML</code>解析。</li></ul></li></ul><h4 id="RuntimeService"><a href="#RuntimeService" class="headerlink" title="RuntimeService"></a>RuntimeService</h4><ul><li>是<code>Activiti</code>的流程运行管理类，可以获取很多<strong>流程执行</strong>相关的信息。</li><li>在<code>Activiti</code>中，每当一个流程定义被启动一次之后，都会生成一个相应的流程对象实例。Runtime Service提供了启动流程、查询流程实例、设置获取流程实例变量等功能。此外它还提供了对流程部署、流程定义和流程实例的存取服务。</li></ul><h4 id="TaskService"><a href="#TaskService" class="headerlink" title="TaskService"></a>TaskService</h4><ul><li>是<code>Activiti</code>的任务管理类，可以获取到<strong>任务</strong>的信息。</li><li>在<code>Activiti</code>中业务流程定义中的每一个执行节点被称为一个Task，对流程中的数据存取、状态变更等操作均需要在Task中完成。Task Service提供了对用户Task和Form相关的操作。它提供了运行时任务查询、领取、完成、删除以及变量设置等功能。</li></ul><h4 id="HistoryService"><a href="#HistoryService" class="headerlink" title="HistoryService"></a>HistoryService</h4><ul><li>是<code>Activiti</code>的历史管理类，可以查询到<strong>流程的历史信息</strong>。在执行流程时，引擎会保存诸如流程实例启动时间、任务参与者、完成任务的时间、每个流程实例的执行路径等数据（根据配置确定），这些数据可以通过该服务查询获得。</li><li>History Service用于获取正在运行或已经完成的流程实例的信息，与Runtime Service中获取的流程信息不同，历史信息包含已经持久化存储的永久信息，并已经被针对查询优化。</li></ul><h4 id="ManagementService"><a href="#ManagementService" class="headerlink" title="ManagementService"></a>ManagementService</h4><ul><li>是<code>Activiti</code>的引擎管理类，提供对<code>Activiti</code>流程引擎的管理和维护功能，这些功能不在工作流驱动的应用程序中使用，主要用于<code>Activiti</code>系统的日常维护。</li></ul><h4 id="IdentityService"><a href="#IdentityService" class="headerlink" title="IdentityService"></a>IdentityService</h4><ul><li><code>Activiti</code>中内置了用户以及组管理的功能，必须使用这些用户和组的信息才能获取到相应的Task。Identity Service提供了对<code>Activiti</code>系统中的用户和组的管理功能。</li></ul><h4 id="FormService"><a href="#FormService" class="headerlink" title="FormService"></a>FormService</h4><ul><li><code>Activiti中</code>的流程和状态Task均可以关联业务相关的数据。通过使用Form Service可以存取启动和完成任务所需的表单数据并且根据需要来渲染表单。</li></ul><h2 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h2><p>要使用<code>Activiti</code>处理流程业务，在上述理论部分也提到，首先需要为你的开发环境提供支持开发的各种插件，具体见上面的内容。</p><p>在做好准备工作之后，就可以开始项目的开发了。</p><h3 id="（1）流程定义"><a href="#（1）流程定义" class="headerlink" title="（1）流程定义"></a><strong>（1）流程定义</strong></h3><ul><li><p>在流程的定义中，需要使用到<code>Activiti-Designer</code>工具，该工具提供绘制流程图的画板（Palette），在画板中包括下面的结点：</p><ul><li><p><code>Connection</code>：连接</p></li><li><p><code>Event</code>：事件</p></li><li><p><code>Task</code>：任务</p></li><li><p><code>Gateway</code>：网关</p></li><li><p><code>Container</code>：容器</p></li><li><p><code>Boundary event</code>：边界事件</p></li><li><p><code>Intermediate event</code>：中间事件</p><p><img src="Activiti.assets/image-20210505170416917.png" alt="image-20210505170416917"></p></li></ul></li></ul><ul><li><p>需要注意的是，在定义流程的过程中，还需要为目标流程设置一些属性（如流程的ID、流程的名称等），具体界面视集成开发环境的不同而不同。在笔者使用的Eclipse集成开发环境中，需要在<code>Properties</code>视图中进行配置，具体打开该视图的步骤是：单击工具栏中的<code>Window</code>——&gt;选中<code>Show View</code>选项——&gt;点击<code>Other</code>子选项——&gt;在弹出的对话框中搜索<code>Properties</code>并选中回车即可。</p><ul><li>设置整个流程的属性（单击空白部分，即可在<code>Properties</code>视图窗口中显示流程的相关属性），主要设置流程的ID和名称</li></ul><p><img src="Activiti.assets/image-20210505165922569.png" alt="image-20210505165922569"></p><ul><li><p>设置各个结点的属性（单击流程图中目标结点，在<code>Properties</code>视图窗口中显示相关属性），只要设置结点的任务审批人</p><p><img src="Activiti.assets/image-20210505171520863.png" alt="image-20210505171520863"></p></li></ul></li></ul><ul><li><p>在绘制并配置好流程图（定义好流程）之后，会生成<code>.bpmn</code>格式的文件。</p><p><img src="Activiti.assets/image-20210505171720055.png" alt="image-20210505171720055"></p></li></ul><h3 id="（2）部署流程定义"><a href="#（2）部署流程定义" class="headerlink" title="（2）部署流程定义"></a><strong>（2）部署流程定义</strong></h3><ul><li><p>有了流程图（流程定义）还不行，需要将其部署到工作流引擎<code>activiti</code>中。方法如下：</p><ul><li><p>使用<code>ProcessEngine</code>创建<code>RepositoryService</code>；</p></li><li><p>使用<code>repositoryService</code>部署已经定义好的流程。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建ProcessEngine</span><br><span class="hljs-type">ProcessEngine</span> <span class="hljs-variable">processEngine</span> <span class="hljs-operator">=</span> ProcessEngines.getDefaultProcessEngine();<br><br><span class="hljs-comment">// 得到RepositoryService实例</span><br><span class="hljs-type">RepositoryService</span> <span class="hljs-variable">repositoryService</span> <span class="hljs-operator">=</span> processEngine.getRepositoryService();<br><br><span class="hljs-comment">// 进行部署</span><br><span class="hljs-comment">// 方式一：单个文件分别部署</span><br><span class="hljs-type">Deployment</span> <span class="hljs-variable">deployment</span> <span class="hljs-operator">=</span> repositoryService.createDeployment()<br>    .addClasspathResource(<span class="hljs-string">&quot;diagram/holiday.bpmn&quot;</span>) <span class="hljs-comment">// bpmn文件</span><br>    .addClasspathResource(<span class="hljs-string">&quot;diagram/holiday.png&quot;</span>) <span class="hljs-comment">// 图片文件</span><br>    .name(<span class="hljs-string">&quot;请假流程&quot;</span>)<br>    .deploy(); <span class="hljs-comment">// 部署</span><br><br><span class="hljs-comment">// 方式二：压缩包部署方式(将单个流程定义文件添加到压缩包之后部署)（这种方式便于以后实际的服务器部署）</span><br>ActivitiDeployment.class.getClass().getClassLoader();<br><span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> ClassLoader.getSystemResourceAsStream(<span class="hljs-string">&quot;diagram/holidayBPMN.zip&quot;</span>);<br><span class="hljs-type">ZipInputStream</span> <span class="hljs-variable">zipInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZipInputStream</span>(is);<br><br><span class="hljs-comment">// 进行部署</span><br><span class="hljs-type">Deployment</span> <span class="hljs-variable">deployment</span> <span class="hljs-operator">=</span> repositoryService.createDeployment()<br>    .addZipInputStream(zipInputStream)<br>    .name(<span class="hljs-string">&quot;请假流程&quot;</span>).deploy();<br><br><span class="hljs-comment">// 输出部署信息</span><br>System.out.println(deployment.getName()); <span class="hljs-comment">// 请假流程</span><br>System.out.println(deployment.getId()); <span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure></li><li><p>可以发现，在输出的部署信息中，名称与我们设置的流程名称一致，而流程的ID是“1”，这是因为使用了<code>MySQL</code>的主键自动增长策略，观察被操作的数据库表<code>act_re_deployment</code>表可以得知。</p><p><img src="Activiti.assets/image-20210505175126201.png" alt="image-20210505175126201"></p></li></ul></li></ul><ul><li><p>涉及到的表</p><ul><li><p><code>act_re_deployment</code>：部署信息（如不是流程的名称、部署时间等）</p></li><li><p><code>act_re_procdef</code>：流程定义的一些信息（如流程的key等）</p><p><img src="Activiti.assets/image-20210505181500549.png" alt="image-20210505181500549"></p><p><img src="Activiti.assets/image-20210505181526481.png" alt="image-20210505181526481"></p></li><li><p><code>act_ge_bytearray</code>：流程定义的<code>bpmn</code>文件和<code>png</code>文件</p><p><img src="Activiti.assets/image-20210505181625081.png" alt="image-20210505181625081"></p></li></ul></li></ul><h3 id="（3）启动一个流程实例"><a href="#（3）启动一个流程实例" class="headerlink" title="（3）启动一个流程实例"></a><strong>（3）启动一个流程实例</strong></h3><ul><li><p>流程定义部署到<code>activiti</code>中后，就可以通过工作流管理业务流程了。这种关系类似<code>Java中</code>的<code>Java类</code>和对象，光有类不行，还需要通过实例化一个类对象才能使用该类的所有属性和方法。</p></li><li><p>启动一个流程，在该实例中就是发起一个新的请假申请单。发起人（张三）发起一个请假申请单，需要启动一个流程实例；请假申请单发起一个请假单也需要启动一个流程实例。</p></li><li><p>启动方法如下：</p><ul><li><p>使用<code>ProcessEngine</code>创建<code>RuntimeService</code>对象实例；</p></li><li><p>使用<code>RuntimeServcie</code>实例对象根据已经定义好且已经部署的流程定义的<code>key</code>创建（启动）流程实例。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 得到ProcessEngine对象</span><br><span class="hljs-type">ProcessEngine</span> <span class="hljs-variable">processEngine</span> <span class="hljs-operator">=</span> ProcessEngines.getDefaultProcessEngine();<br><br><span class="hljs-comment">// 得到RuntimeService对象</span><br><span class="hljs-type">RuntimeService</span> <span class="hljs-variable">runtimeService</span> <span class="hljs-operator">=</span> processEngine.getRuntimeService();<br><br><span class="hljs-comment">// 创建流程实例 根据流程定义的key创建实例</span><br><span class="hljs-type">ProcessInstance</span> <span class="hljs-variable">processInstance</span> <span class="hljs-operator">=</span> runtimeService.startProcessInstanceByKey(<span class="hljs-string">&quot;holiday&quot;</span>);<br><br><span class="hljs-comment">// 输出实例的相关信息</span><br>System.out.println(<span class="hljs-string">&quot;流程部署ID：&quot;</span> + processInstance.getDeploymentId()); <span class="hljs-comment">// 流程部署ID：null</span><br>System.out.println(<span class="hljs-string">&quot;流程实例ID：&quot;</span> + processInstance.getId()); <span class="hljs-comment">// 流程实例ID：2501</span><br></code></pre></td></tr></table></figure></li><li><p>可以发现，在启动流程实例后，可以获得已经启动的流程实例的ID。</p></li></ul></li><li><p>涉及到的表</p><ul><li><p><code>act_hi_actinst</code>：存储已完成的活动信息，即已经完成了流程图中的哪些结点信息。</p><p><img src="Activiti.assets/image-20210506204111160.png" alt="image-20210506204111160"></p></li><li><p><code>act_hi_identitylink</code>：流程中结点关联的参与者信息（即需要处理该结点的人员信息）。</p><p><img src="Activiti.assets/image-20210506204339098.png" alt="image-20210506204339098"></p></li><li><p><code>act_hi_procinst</code>：存储流程实例信息，主要关注流程实例ID。</p><p><img src="Activiti.assets/image-20210506204627408.png" alt="image-20210506204627408"></p></li><li><p><code>act_hi_taskinst</code>：存储任务实例（谁要完成什么工作）信息。</p><p><img src="Activiti.assets/image-20210506204931866.png" alt="image-20210506204931866"></p><p><img src="Activiti.assets/image-20210506205012680.png" alt="image-20210506205012680"></p></li><li><p><code>act_ru_execution</code>：任务执行表。</p><p><img src="Activiti.assets/image-20210506205218650.png" alt="image-20210506205218650"></p><p><img src="Activiti.assets/image-20210506205303051.png" alt="image-20210506205303051"></p><p><img src="Activiti.assets/image-20210506205341435.png" alt="image-20210506205341435"></p></li><li><p><code>act_ru_identitylink</code>：运行时的参与者信息。</p><p><img src="Activiti.assets/image-20210506205520131.png" alt="image-20210506205520131"></p></li><li><p><code>act_ru_task</code>：存储任务信息。</p><p><img src="Activiti.assets/image-20210506205712061.png" alt="image-20210506205712061"></p><p><img src="Activiti.assets/image-20210506205742097.png" alt="image-20210506205742097"></p></li></ul></li></ul><h3 id="（4）任务查询"><a href="#（4）任务查询" class="headerlink" title="（4）任务查询"></a><strong>（4）任务查询</strong></h3><ul><li><p>流程实例启动以后，各个任务的负责人就可以查询自己当前需要处理的任务，查询出来的所有任务都是该用户当前需要处理的待办任务。</p></li><li><p>查询方法如下：</p><ul><li><p>首先仍然需要得到<code>ProcessEngine</code>对象，并通过该对象实例创建<code>TaskService</code>对象（用户需要处理的待办结点事项就是任务）；</p></li><li><p>根据流程定义的<code>key</code>和任务参与者信息（流程定义时指定的结点负责人）查询得到该用于当前需要处理的任务。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 得到ProcessEngine对象</span><br><span class="hljs-type">ProcessEngine</span> <span class="hljs-variable">processEngine</span> <span class="hljs-operator">=</span> ProcessEngines.getDefaultProcessEngine();<br><br><span class="hljs-comment">// 得到TaskService对象</span><br><span class="hljs-type">TaskService</span> <span class="hljs-variable">taskService</span> <span class="hljs-operator">=</span> processEngine.getTaskService();<br><br><span class="hljs-comment">// 根据用户信息查询当前需要处理的任务</span><br>List&lt;Task&gt; taskList = taskService.createTaskQuery().processDefinitionKey(<span class="hljs-string">&quot;holiday&quot;</span>)<br>    .taskAssignee(<span class="hljs-string">&quot;zhangsan&quot;</span>)<br>    .list();<br><br><span class="hljs-comment">// 任务列表内容展示</span><br><span class="hljs-keyword">for</span> (Task task : taskList) &#123;<br>    System.out.println(<span class="hljs-string">&quot;流程实例ID：&quot;</span> + task.getProcessInstanceId()); <span class="hljs-comment">// 流程实例ID：2501</span><br>    System.out.println(<span class="hljs-string">&quot;任务ID：&quot;</span> + task.getId()); <span class="hljs-comment">// 任务ID：2505</span><br>    System.out.println(<span class="hljs-string">&quot;任务负责人：&quot;</span> + task.getAssignee()); <span class="hljs-comment">// 任务负责人：zhangsan</span><br>    System.out.println(<span class="hljs-string">&quot;任务名称：&quot;</span> + task.getName()); <span class="hljs-comment">// 任务名称：填写请假申请单</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>可以发现，查询任务负责人所要处理的任务信息，主要是查询上面在启动流程实例后的一些表信息。</p></li></ul><h3 id="（5）任务处理"><a href="#（5）任务处理" class="headerlink" title="（5）任务处理"></a><strong>（5）任务处理</strong></h3><ul><li><p>任务负责人查询到待办任务，选择任务进行处理，完成任务。</p></li><li><p>该步骤的进行，依赖于上述任务的查询，需要首先查询到当前用户（负责人）需要处理流程中的哪些任务，故可以在正式开发时将查询和处理合并到一起进行。方法如下：</p><ul><li><p>根据参与者信息和流程定义的<code>key</code>查询到需要处理的任务ID；</p></li><li><p>将对应ID的任务处理，调用<code>TaskService</code>对象的<code>complete</code>方法即可。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 得到ProcessEngine对象</span><br><span class="hljs-type">ProcessEngine</span> <span class="hljs-variable">processEngine</span> <span class="hljs-operator">=</span> ProcessEngines.getDefaultProcessEngine();<br><br><span class="hljs-comment">// 得到TaskService对象</span><br><span class="hljs-type">TaskService</span> <span class="hljs-variable">taskService</span> <span class="hljs-operator">=</span> processEngine.getTaskService();<br><br><span class="hljs-comment">// 完成任务</span><br>List&lt;Task&gt; taskList = taskService.createTaskQuery().processDefinitionKey(<span class="hljs-string">&quot;holiday&quot;</span>)<br>    .taskAssignee(<span class="hljs-string">&quot;zhangsan&quot;</span>)<br>    .list();<br><span class="hljs-keyword">for</span> (Task task : taskList) &#123;<br>    taskService.complete(task.getId());<br>    System.out.println(<span class="hljs-string">&quot;当前完成的任务ID是：&quot;</span> + task.getId()); <span class="hljs-comment">// 当前完成的任务ID是：2505</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>可以发现，当当前用户只有一条需要完成的任务时，只输出一条任务信息。</p></li></ul><ul><li><p>涉及到的表</p><ul><li><p><code>act_hi_actinst</code>：存储已完成的任务结点信息。可以发现，在结点一被处理以后，新的结点被加入进来。</p><p><img src="Activiti.assets/image-20210506212852855.png" alt="image-20210506212852855"></p></li><li><p><code>act_hi_identitylink</code>：新的任务结点加入进来，加入新的任务负责人信息。</p><p><img src="Activiti.assets/image-20210506213037773.png" alt="image-20210506213037773"></p></li><li><p><code>act_hi_taskinst</code>：新的任务实例被加入进来，同时前一结点的任务加入完成时间。</p><p><img src="Activiti.assets/image-20210506213240227.png" alt="image-20210506213240227"></p></li><li><p><code>act_ru_execution</code>：执行新的结点任务，更新当前流程任务结点ID。</p><p><img src="Activiti.assets/image-20210506213604364.png" alt="image-20210506213604364"></p></li><li><p><code>act_ru_identitylink</code>：运行时任务结点的参与者信息，与历史表中的参与者信息一致。</p><p><img src="Activiti.assets/image-20210506213714171.png" alt="image-20210506213714171"></p></li><li><p><code>act_ru_task</code>：当前运行的任务，保证表中存储的是当前正在运行的结点任务。</p><p><img src="Activiti.assets/image-20210506213839650.png" alt="image-20210506213839650"></p></li></ul></li><li><p>剩下的任务结点需要改变完成流程任务代码中的参与者信息，待完成所有任务后，上述表中以<code>act_ru</code>开头的表中的信息也会随之被删除，以<code>act_hi</code>开头的表中的信息会被补全。</p></li></ul><p>上面这个流程示例就是一个简单的请假流程，从流程的定义、流程的部署、流程实例的启动以及流程各结点任务的完成。需要说明的是，上面的这个示例是一个单独运行的<code>Activiti</code>流程，没有真正整合到带有流程的<code>Web</code>项目中。</p><h2 id="与业务系统关联"><a href="#与业务系统关联" class="headerlink" title="与业务系统关联"></a>与业务系统关联</h2><ul><li><p>使用<code>BusinessKey</code>（业务主键），该字段在<code>act_ru_execution</code>表中。</p></li><li><p><code>BusinessKey</code>实际上是某个申请表单的<code>ID</code>，如请假流程中的请假表单（业务表），某个人发起一个请假，就会存在一个<code>BusinessKey</code>（业务表的主键）。</p></li><li><p>目的是在查询流程信息时关联查询流程对应的业务信息数据，原因是流程所生成的数据表中不存储业务数据。</p></li></ul><p><img src="Activiti.assets/image-20210604103404886.png" alt="image-20210604103404886"></p><h2 id="挂起单个流程实例"><a href="#挂起单个流程实例" class="headerlink" title="挂起单个流程实例"></a>挂起单个流程实例</h2><p>对于流程实例的挂起操作，影响的数据表有哪些？影响了哪些字段？</p><p>解答：影响的表有<code>ACT_RU_EXECUTION</code>和<code>ACT_RU_TASK</code>。影响的字段主要有<code>SUSPENSION_STATE_</code>，“1”表示处于激活状态，“2”表示处于挂起状态。状态字段对应的一个接口类是<code>SuspensionState</code>，在该类中定义了状态常量，其实现类是<code>SuspensionStateImpl</code>。</p><p>当对一个挂起的流程实例执行其任务时，会报异常，异常信息为：</p><p><code>Exception in thread &quot;main&quot; org.activiti.engine.ActivitiException: Cannot complete a suspended task     at org.activiti.engine.impl.cmd.NeedsActiveTaskCmd.execute(NeedsActiveTaskCmd.java:53)     at org.activiti.engine.impl.interceptor.CommandInvoker$1.run(CommandInvoker.java:37)     at org.activiti.engine.impl.interceptor.CommandInvoker.executeOperation(CommandInvoker.java:78)     at org.activiti.engine.impl.interceptor.CommandInvoker.executeOperations(CommandInvoker.java:57)     at org.activiti.engine.impl.interceptor.CommandInvoker.execute(CommandInvoker.java:42)     at org.activiti.engine.impl.interceptor.TransactionContextInterceptor.execute(TransactionContextInterceptor.java:48)     at org.activiti.engine.impl.interceptor.CommandContextInterceptor.execute(CommandContextInterceptor.java:63)     at org.activiti.engine.impl.interceptor.LogInterceptor.execute(LogInterceptor.java:29)     at org.activiti.engine.impl.cfg.CommandExecutorImpl.execute(CommandExecutorImpl.java:44)     at org.activiti.engine.impl.cfg.CommandExecutorImpl.execute(CommandExecutorImpl.java:39)     at org.activiti.engine.impl.TaskServiceImpl.complete(TaskServiceImpl.java:192)     at com.poetr.activiti.ActivitiCompleteTask.main(ActivitiCompleteTask.java:24)</code></p><h2 id="Activiti中个人任务的分配方式"><a href="#Activiti中个人任务的分配方式" class="headerlink" title="Activiti中个人任务的分配方式"></a>Activiti中个人任务的分配方式</h2><p>固定的方式：在定义流程时指定特定的人。</p><p><img src="Activiti.assets%5Cimage-20210805230247939.png" alt="image-20210805230247939"></p><p>使用UEL表达式：</p><ul><li><p>UEL（Unified Expression Language） 统一表达式语言，是Java EE6规范的一部分</p></li><li><p>activiti支持两个UEL表达式：UEL-value，UEL-method</p></li></ul><p><img src="Activiti.assets/image-20210805231256151.png" alt="image-20210805231256151"></p><p>使用监听器方式：</p><ul><li><p>任务监听器方式是发生对应的任务相关事件时执行自定义Java逻辑 或 表达式（同UEL表达式）</p></li><li><p><img src="Activiti.assets/image-20210809194514640.png" alt="image-20210809194514640"></p></li><li><p>create：任务创建后触发</p><p>assignment：任务分配后触发</p><p>complete：任务完成后触发</p><p>all：所有事件发生都触发</p></li></ul><h2 id="使用UEL表达式为流程实例分配执行人"><a href="#使用UEL表达式为流程实例分配执行人" class="headerlink" title="使用UEL表达式为流程实例分配执行人"></a>使用UEL表达式为流程实例分配执行人</h2><ul><li><p>通过这种方式为流程指定任务执行人时，需要在启动流程实例时为UEL指定的<code>key</code>指派具体的<code>value</code></p></li><li><p>```java<br>// 设置assignee的取值 用户可以在界面上设置流程的执行人<br>Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();<br>map.put(“assignee0”, “zhangsan”); // key必须与UEL表达式中的Key一致<br>map.put(“assignee1”, “lisi”);<br>map.put(“assignee2”, “wangwu”);</p><p>// 启动流程实例 同时还要设置流程定义中assignee的值<br>ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(“holiday”, map); // 将指派值作为参数传入</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><br>- 上面指定的值，在Activiti中称之为流程变量<br><br>- 执行上述操作之后，影响的数据表是`act_ru_variable`，在该表中存储流程变量信息<br><br>- ![image<span class="hljs-number">-20210809194248144</span>](Activiti.assets/image<span class="hljs-number">-20210809194248144.</span>png)<br><br><br><br>### 流程变量<br><br>- 流程变量是为了让流程更有效的运转；在与业务系统整合时，流程变量不可或缺；时Activiti在管理工作流时为了管理需要而设置的变量<br><br>- 类型<br><br>  ![image<span class="hljs-number">-20210809200243735</span>](Activiti.assets/image<span class="hljs-number">-20210809200243735.</span>png)<br><br>- 作用域<br><br>  默认是一个流程实例（processInstance）——&gt;global变量；也可以设置为一个任务（task）和一个执行实例（execution）——&gt;local变量。<br><br>  在不同的位置设置，作用于不同的作用域：在启动流程实例时设置，作用于整个流程实例；在完成某一任务时，则作用于之后的流程实例节点；通过当前任务设置变量，作用于当前任务，当前任务必须是待办任务，否则异常。<br><br>  ```java<br>  <span class="hljs-comment">// 启动流程实例时</span><br>  runtimeService.<span class="hljs-built_in">startProcessInstanceByKey</span>(<span class="hljs-string">&quot;holiday&quot;</span>, map); <span class="hljs-comment">// map为Map集合</span><br>  <br>  <span class="hljs-comment">// 完成某一任务时</span><br>  taskService.<span class="hljs-built_in">complete</span>(taskId, map);<br>  <br>  <span class="hljs-comment">// 通过当前任务</span><br>  taskService.<span class="hljs-built_in">setVariables</span>(taskId, map);<br></code></pre></td></tr></table></figure></li><li><p>使用</p><p>可以将流程变量设置在流程的线上，连线上的UEL表达式决定了流程的走向</p></li><li><p>影响的表</p><p><code>act_ru_variable</code></p><p><code>act_ge_bytearray</code> 类型为Java对象时影响该表</p></li><li><p>当某个流程实例结束之后，变量表中与该流程实例相关的变量便会全部被删除</p></li><li><p>流程中使用过的变量，在流程结束后，存在于<code>act_hi_varinst</code>表中</p></li></ul><h2 id="组任务"><a href="#组任务" class="headerlink" title="组任务"></a>组任务</h2><ul><li><p>候选人的设置是为了更好的提升流程的可扩展性，而非固定的只能由一个人执行某一任务（Candidate users）</p></li><li><p>设置候选人会影响的表有<code>act_ru_identitylink</code>和<code>act_hi_identitylink</code>，候选人的<code>type</code>字段为<code>candidant</code></p><p><img src="Activiti.assets/image-20210810195657263.png" alt="image-20210810195657263"></p></li><li><p>办理组任务的流程：</p><ul><li>查询组任务（根据指定的候选人信息查询可以办理的组任务，候选人不能办理组任务）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 查询组任务</span><br>List&lt;Task&gt; taskList = taskService.createTaskQuery().processDefinitionKey(<span class="hljs-string">&quot;holiday&quot;</span>)<br>    .taskCandidateUser(<span class="hljs-string">&quot;huahua&quot;</span>) <span class="hljs-comment">// 根据候选人查询</span><br>    .list();<br></code></pre></td></tr></table></figure><ul><li>拾取（claim）任务，就是将组任务变成个人任务；拾取后不想办理可将任务还到组里（拾取前最好先校验该用户有没有拾取权限），还可将任务交接给候选组中的指定候选人</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 校验用户有没有拾取任务的资格</span><br><span class="hljs-type">Task</span> <span class="hljs-variable">taskResult</span> <span class="hljs-operator">=</span> taskService.createTaskQuery().taskId(<span class="hljs-string">&quot;5002&quot;</span>)<br>    .taskCandidateUser(<span class="hljs-string">&quot;huahua&quot;</span>)<br>    .singleResult();<br><br><span class="hljs-comment">// 拾取任务</span><br><span class="hljs-keyword">if</span> (taskResult != <span class="hljs-literal">null</span>) &#123;<br>    taskService.claim(taskResult.getId(), <span class="hljs-string">&quot;huahua&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;当前拾取的任务ID是：&quot;</span> + taskResult.getId());<br>&#125;<br><br><span class="hljs-comment">// 归还组任务,先进行校验</span><br><span class="hljs-type">Task</span> <span class="hljs-variable">taskResult</span> <span class="hljs-operator">=</span> taskService.createTaskQuery().taskId(<span class="hljs-string">&quot;5002&quot;</span>)<br>    .taskAssignee(<span class="hljs-string">&quot;huahua&quot;</span>)<br>    .singleResult();<br><br><span class="hljs-comment">// 不想办理时归还组任务</span><br><span class="hljs-keyword">if</span> (taskResult != <span class="hljs-literal">null</span>) &#123;<br>    taskService.setAssignee(<span class="hljs-string">&quot;5002&quot;</span>, <span class="hljs-literal">null</span>);<br>    System.out.println(<span class="hljs-string">&quot;当前归还的任务ID是：&quot;</span> + taskResult.getId());<br>&#125;<br><br><span class="hljs-comment">// 交接组任务,先进行校验</span><br><span class="hljs-type">Task</span> <span class="hljs-variable">task</span> <span class="hljs-operator">=</span> taskService.createTaskQuery().taskId(<span class="hljs-string">&quot;5002&quot;</span>)<br>    .taskAssignee(<span class="hljs-string">&quot;huahua&quot;</span>)<br>    .singleResult();<br><br><span class="hljs-keyword">if</span> (task != <span class="hljs-literal">null</span>) &#123;<br>    taskService.setAssignee(<span class="hljs-string">&quot;5002&quot;</span>, <span class="hljs-string">&quot;lisi&quot;</span>); <span class="hljs-comment">// 将任务交接给另一候选人</span><br>&#125;<br></code></pre></td></tr></table></figure><p>​        拾取任务成功后，会在当前任务表中的<code>assignee</code>字段赋值。</p><p>​        拾取前：</p><p>​    <img src="Activiti.assets/image-20210809233858149.png" alt="image-20210809233858149"></p><p>​        拾取后：</p><p><img src="Activiti.assets/image-20210809233207963.png" alt="image-20210809233207963"></p><ul><li><p>查询个人任务</p><p>拾取组任务之后，可以与个人任务的查询一致，进行负责人任务的查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 用户查询个人待办任务(与普通任务一致)</span><br>List&lt;Task&gt; list = taskService.createTaskQuery().processDefinitionKey(<span class="hljs-string">&quot;holiday&quot;</span>)<br>    .taskAssignee(<span class="hljs-string">&quot;huahua&quot;</span>)<br>    .list();<br><br><span class="hljs-keyword">for</span> (Task task : list) &#123;<br>    System.out.println(<span class="hljs-string">&quot;-----------------------&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;流程实例ID：&quot;</span> + task.getProcessInstanceId());<br>    System.out.println(<span class="hljs-string">&quot;任务ID：&quot;</span> + task.getId());<br>    System.out.println(<span class="hljs-string">&quot;任务负责人：&quot;</span> + task.getAssignee());<br>    System.out.println(<span class="hljs-string">&quot;任务名称：&quot;</span> + task.getName());<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>办理个人任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 用户办理个人任务（同个人任务办理）</span><br><span class="hljs-type">Task</span> <span class="hljs-variable">task</span> <span class="hljs-operator">=</span> taskService.createTaskQuery().processDefinitionKey(<span class="hljs-string">&quot;holiday&quot;</span>)<br>    .taskAssignee(<span class="hljs-string">&quot;huahua&quot;</span>)<br>    .singleResult();<br><br><span class="hljs-keyword">if</span> (task != <span class="hljs-literal">null</span>) &#123;<br>    taskService.complete(task.getId());<br>    System.out.println(<span class="hljs-string">&quot;当前完成的任务是：&quot;</span> + task.getId());<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="网关"><a href="#网关" class="headerlink" title="网关"></a>网关</h2><ul><li><p>使用到的Activiti网关主要有排他网关（XOR网关、异或网关）、并行网关和包含网关</p></li><li><p>网关的出现是为了支持流程的多路径</p></li><li><p>排他网关</p><ul><li><p>用来在流程中实现决策</p></li><li><p>每一只能选择一条满足条件的路径执行，都不满足时报Activiti异常</p></li><li><p>任务执行到网关后，会在<code>act_hi_actinst</code>表中插入数据</p><p><img src="Activiti.assets/image-20210810205707805.png" alt="image-20210810205707805"></p></li></ul></li></ul><ul><li><p>并行网关</p><ul><li><p>并行网关允许将流程分成多条分支，也可以把多条分支汇聚到一起</p></li><li><p>并行网关的功能是基于进入和外出顺序流的</p></li><li><p>并行网关不会解析条件，即使顺序流中定义了条件，也会被忽略</p><p><img src="file:///D:/workspace/actiProj/src/main/resources/diagram/holiday.png" alt="img"></p></li><li><p>并行节点处会在当前执行任务表中同时存在等于输出流总数的记录数，而一般只存在一条当前执行任务</p><p><img src="Activiti.assets/image-20210810214700323.png" alt="image-20210810214700323"></p></li><li><p>所有分支到达汇聚结点，并行网关执行完成</p></li></ul></li></ul><ul><li>排他网关<ul><li>是排他网关和并行网关结合体</li></ul></li></ul></li></ul><h2 id="？-flowable"><a href="#？-flowable" class="headerlink" title="？ flowable"></a>？ flowable</h2>]]></content>
    
    
    <categories>
      
      <category>Activiti</category>
      
      <category>工作流</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2022/07/13/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2022/07/13/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>这是一篇测试文章</p><img src="/2022/07/13/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/test.png" class="" title="图片引用方法一">]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
